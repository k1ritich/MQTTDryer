
<% if (timerInfo) { %>
	<script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
	<script>
		let activeSource = '';
		const socket = io();
		// Socket.io event handler for 'mqttMessage'
		socket.on('mqttMessage', (payload) => {
		  // Update your HTML elements with the received MQTT message
		//   console.log(payload);
		  // Update values based on the received MQTT message
			if (payload.topic === 'MYMQTT/TemperatureTopic') {
				document.getElementById('Temperature').value = payload.message;
			} else if (payload.topic === 'MYMQTT/HumidityTopic') {
				document.getElementById('Humidity').value = payload.message;
			} else if (payload.topic === 'MYMQTT/TemperatureTopic0') {
				document.getElementById('FLTemperature').value = payload.message;
			} else if (payload.topic === 'MYMQTT/HumidityTopic0') {
				document.getElementById('FLHumidity').value = payload.message;
			} else if (payload.topic === 'MYMQTT/TemperatureTopic1') {
				document.getElementById('FRTemperature').value = payload.message;
			} else if (payload.topic === 'MYMQTT/HumidityTopic1') {
				document.getElementById('FRHumidity').value = payload.message;
			} else if (payload.topic === 'MYMQTT/TemperatureTopic2') {
				document.getElementById('CLTemperature').value = payload.message;
			} else if (payload.topic === 'MYMQTT/HumidityTopic2') {
				document.getElementById('CLHumidity').value = payload.message;
			} else if (payload.topic === 'MYMQTT/TemperatureTopic3') {
				document.getElementById('CRTemperature').value = payload.message;
			} else if (payload.topic === 'MYMQTT/HumidityTopic3') {
				document.getElementById('CRHumidity').value = payload.message;
			} else if (payload.topic === 'MYMQTT/TemperatureTopic4') {
				document.getElementById('RLTemperature').value = payload.message;
			} else if (payload.topic === 'MYMQTT/HumidityTopic4') {
				document.getElementById('RLHumidity').value = payload.message;
			} else if (payload.topic === 'MYMQTT/TemperatureTopic5') {
				document.getElementById('RRTemperature').value = payload.message;
			} else if (payload.topic === 'MYMQTT/HumidityTopic5') {
				document.getElementById('RRHumidity').value = payload.message;
			}else if (payload.topic === 'MYMQTT/LightTopic') {
				document.getElementById('LightIntensity').value = payload.message;
			} else if (payload.topic === 'MYMQTT/VoltageTopic') {
				document.getElementById('BattPowerVoltage').value = payload.message;
			} else if (payload.topic === 'MYMQTT/SourceTopic') {
				if (payload.message === 'BATTERY') {
					document.getElementById("ACPower").value = "OFF";
					document.getElementById("BattPower").value = payload.message;
					activeSource = payload.message;
					handleSourceMessage(payload.message)
				} else if (payload.message === 'AC') {
					document.getElementById("BattPower").value = "OFF";
					document.getElementById("ACPower").value = payload.message;
					activeSource = payload.message;
				handleSourceMessage(payload.message)
				} else if (payload.message === 'OFF') {
					document.getElementById("BattPower").value = "OFF";
					document.getElementById("ACPower").value = "OFF";
					activeSource = payload.message;
				handleSourceMessage(payload.message)
				}
			} else if (payload.topic === 'MYMQTT/SourceModeTopic') {
				if (payload.message === 'AUTOMATIC') {
					document.getElementById('acbutton').disabled = (document.getElementById('mode').value === "AUTOMATIC");
					document.getElementById('batterybutton').disabled = (document.getElementById('mode').value === "AUTOMATIC");
					handleModeMessage(payload.message)
				} else if (payload.message === 'MANUAL') {
					document.getElementById("mode").value = "MANUAL";
					handleModeMessage(payload.message);
				} else if (payload.message === 'OFF') {
					document.getElementById('acbutton').disabled = (document.getElementById('mode').value === "OFF");
					document.getElementById('batterybutton').disabled = (document.getElementById('mode').value === "OFF");
					handleModeMessage(payload.message)
				}
			} else if (payload.topic === 'MYMQTT/ACVoltageTopic'){
				document.getElementById('ACPowerVoltage').value = payload.message;
			} else if (payload.topic === 'MYMQTT/ACCurrentTopic'){
				document.getElementById('ACPowerCurrent').value = payload.message;
			} else if (payload.topic === 'MYMQTT/ACPowerTopic'){
				document.getElementById('ACPowerUsage').value = payload.message;
			}
		});
		
		function switchSource(source) {
			console.log('<%= timerInfo.id %>');
			const DryingID = '<%= timerInfo.id %>';

			const modeValue = document.getElementById('mode').value;
			const topic = 'MYMQTT/SwitchSourceTopic';
			socket.emit('publishMessage', { topic, message: source });

			// Save data to MongoDB via the server
			saveToMongo({
				RelayState: source,  // Replace with the actual value for RelayState
				DryingMode: modeValue,
				DryingID: DryingID
			});
		}
		function switchSourceMode() {
			// Ensure DryingID is properly assigned before calling this function
			const DryingID ='<%= timerInfo.id %>';

			const modeValue = document.getElementById('mode').value;
			document.getElementById('acbutton').disabled = (modeValue === "AUTOMATIC");
			document.getElementById('batterybutton').disabled = (modeValue === "AUTOMATIC");
			const topic = 'MYMQTT/SwitchSourceModeTopic';
			socket.emit('publishMessage', { topic, message: modeValue });

			// Save data to MongoDB via the server
			saveToMongo({
				RelayState: activeSource,
				DryingMode: modeValue,
				DryingID: DryingID
			});
		}


		function saveToMongo(data) {
			// Assuming you have a route on the server for saving data to MongoDB, replace '/SaveToMongo' with the correct route
			const saveToMongoRoute = '/SaveToMongo';

			// Send an HTTP POST request to the server
			fetch(saveToMongoRoute, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(data),
			})
				.then(response => response.text())
				.then(message => console.log(message))
				.catch(error => console.error('Error saving data to MongoDB:', error));
		}



		function handleSourceMessage(source) {
			var acButton = document.getElementById('acbutton');
			var batteryButton = document.getElementById('batterybutton');

			// Update the background color of the AC and Battery buttons
			if (source === 'AC') {
				acli.style.backgroundColor = '#800000'; // Change this to your desired color
				batli.style.backgroundColor = ''; // Reset battery button color
			} else if (source === 'BATTERY') {
				batli.style.backgroundColor = '#800000'; // Change this to your desired color
				acli.style.backgroundColor = ''; // Reset AC button color
			} else if (source === 'OFF'){
				// Handle other cases or reset both buttons if needed
				acli.style.backgroundColor = '';
				batli.style.backgroundColor = '';
			}
		}

		function handleModeMessage(mode) {
			var modeSelect = document.getElementById('mode');
			var acButton = document.getElementById('acbutton');
			var batteryButton = document.getElementById('batterybutton');

			modeSelect.value = mode;

			// Enable or disable the AC and Battery buttons based on the mode
			acButton.disabled = (mode === 'AUTOMATIC' || mode === 'OFF');
			batteryButton.disabled = (mode === 'AUTOMATIC' || mode === 'OFF');

		}
	</script>
	

<div id="passwordHelpBlock" class="form-text" >
    Drying on progress.
</div>

<!-- The Counting Down Time Remaining should display below with the id="timeRemaining" -->
<div class="form-text overflow-auto" >
    <div id="passwordHelpBlock" class="form-text">
        Time Remaining:
        <span id="timeRemaining"></span> 
    </div>
</div>
<% } else { %>
<div id="passwordHelpBlock" class="form-text" >
    Begin Drying.
</div>
<% } %>

<% if (timerInfo) { %>
<div class="">
	<div class="box-info">
		<button id="batterybutton" style="border: 0px;" onclick="switchSource('SOLAR')">
		<li class="group-a" id="batli">
			<i class='bx bxs-car-battery'></i>
			<span class="text">
				<p class="text-a">Battery</p>
			</span>
		</li>
		</button>

		<button id="acbutton" style="border: 0px;" onclick="switchSource('AC')">
		<li class="group-a" id="acli">
			<i class='bx bxs-bolt' ></i>
			<span class="text">
				<p class="text-a">AC</p>
			</span>
		</li>
		</button>
			
		<li class="group-a" style="height: 128px;">
			<i class='bx bxs-cog'></i>
			<span class="text">
				<!--<h3>$2543</h3>-->
				<select id="mode" class="input-b" style="margin-top: 20px;" onchange="switchSourceMode()">
					<option value="OFF">OFF</option>
					<option value="AUTOMATIC">Automatic</option>
					<option value="MANUAL">Manual</option>
				</select>
				<p class="text-b">Mode</p>
			</span>
		</li>
	</div>
</div>
<% } else { %>
<% } %>

<form id="finishDryingForm" action="/FinishDrying" method="POST">
	<div class="box-info">
		<li style="overflow: hidden;">
			<i class='bx bx-baguette' ></i>
			<span class="text">
				<% if (timerInfo) { %>
					<p>Item</p>
					<div class="overflow-y-hidden"><%= timerInfo.ItemName %></div>
					<input type="text" value="<%= timerInfo.id %>" style="overflow: hidden;margin-top: 20px;"name="DryingID" id="name" class="input-b">
					<input type="text" value="<%= timerInfo.ItemName %>" style="overflow: hidden;margin-top: 20px;"name="ItemName" id="name" class="input-b" hidden>
				<% } else { %>
					<!-- Handle the case where timerInfo is null -->
					<p>Item</p>
					<p>No item being dry.</p>
				<% } %>
			</span>
		</li>
		<li>
			<i class='bx bi-infinity'></i>
			<span class="text">
			<% if (timerInfo) { %>
				<p>Quantity</p>
				<div class="overflow-y-hidden"><%= timerInfo.endTime %></div>
				<input type="datetime" value="<%= timerInfo.endTime %>" style="overflow-wrap: auto; margin-top: 20px;" name="endTime" id="name" class="input-b" hidden>
			<% } else { %>
				<!-- Handle the case where timerInfo is null -->
				<p>Quantity</p>
				<p>No item being dry.</p>
			<% } %>
			</span>
		</li>
		<li>
			<i class='bx bi-hourglass-top'></i>
			<span class="text">
				<% if (timerInfo) { %>
					<p>Start Time</p>
					<div class="overflow-y-hidden"><%= timerInfo.startTime %></div>
					<input type="datetime" value="<%= timerInfo.startTime %>" style="overflow-x: auto; margin-top: 20px;" name="startTime" id="name" class="input-b" hidden>
				<% } else { %>
					<!-- Handle the case where timerInfo is null -->
					<p>Start Time</p>
					<p>No active timer.</p>
				<% } %>
			</span>
		</li>
		<li>
			<i class='bx bi-hourglass-bottom'></i>
			<span class="text">
			<% if (timerInfo) { %>
				<p>End Time</p>
				<div class="overflow-y-hidden"><%= timerInfo.endTime %></div>
				<input type="datetime" value="<%= timerInfo.endTime %>" style="overflow-wrap: auto; margin-top: 20px;" name="endTime" id="name" class="input-b" hidden>
			<% } else { %>
				<!-- Handle the case where timerInfo is null -->
				<p>End Time</p>
				<p>No active timer.</p>
			<% } %>
			</span>
		</li>
	</div>
	<div class="table-data">
		<div class="todo" style="overflow: hidden;">
			<div class="head">
				<h3>Environment Data</h3>
			</div>
				<div class="formbold-input-group">
					<label for="Humidity" class="formbold-form-label">Average Humidity (%)</label>
					<input type="text" value="N/A" name="Humidity" id="Humidity" class="input form-control" readonly>
				</div>
		
				<div class="formbold-input-group">
					<label for="Temperature" class="formbold-form-label">Avergae Temperature (&deg;C)</label>
					<input type="text" value="N/A" name="Temperature" id="Temperature" class="input form-control" readonly>
				</div>
		</div>

		<!-- BATTERY POWER INFORMATION -->
		<div class="todo" style="overflow: hidden;">
			<div class="head">
				<h3>Batt. Information</h3>
			</div>

			<div class="formbold-input-group">
				<label for="BattPower" class="formbold-form-label">Batt. Power Source</label>
				<input type="text" value="N/A" name="BattPower" id="BattPower" class="input form-control" readonly>
				</div>
		
				<div class="formbold-input-group">
				<label for="BattPowerVoltage" class="formbold-form-label">Present Voltage Read</label>
				<input type="text" value="N/A" name="BattPowerVoltage" id="BattPowerVoltage" class="input form-control" readonly>
				</div>

		</div>

		<!-- AC POWER INFORMATION -->
		<div class="todo" style="overflow: hidden;">
			<div class="head">
				<h3>AC Information</h3>
			</div>

			<div class="formbold-input-group">
				<label for="ACPower" class="formbold-form-label">AC Power Source</label>
				<input type="text" value="N/A" name="ACPower" id="ACPower" class="input" readonly>
			</div>

			<div class="formbold-input-group">
				<label for="ACPowerUsage" class="formbold-form-label">Power Usage Over Time (Initial/Current)</label>
			</div>
			<div class="input-group">
				<input value="N/A" type="text" aria-label="First name" class="input form-control text-center" readonly>
				<input value="N/A" type="text" aria-label="First name" style="border: 0px;" class="input form-control text-center" readonly>
			</div>
		</div>
	</div>


<div class="table-data">
	<div class="order">
		<div class="">
			<h3>Temperature/Humidity Readings 
				<a 
				style="z-index: 3000;"
				tabindex="0" 
				class="btn btn-outline-warning"  
				role="button" 
				data-bs-toggle="popover" 
				data-bs-trigger="focus" 
				data-bs-title="Legends" 
				data-bs-content="U/B . R/L= Upper/Bottom . Right/Left TP/RH = Temp/RelativeHumidity"><i class="bi bi-question-circle"></i>
				</a>
			</h3>
		</div>
		<table id="ProfileTable">
			<thead>
				<tr>
					<th>
						<td class="text-center">
							<div class="input-group">
								<input value="Position" type="text" aria-label="First name" style="border: 0px; border-top: #800000 solid 10px; border-left: #800000 solid 10px" class="form-control text-center" readonly disabled>
								<input value="Front" type="text" aria-label="First name" style="border: 0px; border-top: #800000 solid 10px;" class="form-control text-center" readonly disabled>
								<input value="Center" type="text" aria-label="Last name" style="border: 0px; border-top: #800000 solid 10px;" class="form-control text-center" readonly disabled>
								<input value="Rear" type="text" aria-label="Last name" style="border: 0px; border-top: #800000 solid 10px;" class="form-control text-center" readonly disabled>
							</div>
						</td>
					</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<th>
						<td class="text-center">
							<div class="input-group">
								<input value="U.R TP (&deg;C)" type="text" aria-label="First name" style="border-left: solid 10px #800000;border-bottom: 0px; border-bottom-left-radius: 0;" class="form-control text-center" readonly disabled>
								<input value="N/A" type="text" aria-label="First name" style="border: 0px;" id="Temperature0" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Temperature1" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Temperature2" class="form-control text-center" readonly>
							</div>
							<div class="input-group">
								<input value="U.R RH (%)" type="text" aria-label="First name" style="border-left: solid 10px #800000;border-top: 0px; border-top-left-radius: 0;" class="form-control text-center" readonly disabled>
								<input value="N/A" type="text" aria-label="First name" style="border: 0px;" id="Humidity0"class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Humidity1" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Humidity2" class="form-control text-center" readonly>
							</div>
						</td>
					</th>
				</tr>
				<tr>
					<th>
						<td class="text-center">
							<div class="input-group">
								<input value="B.R TP (&deg;C)" type="text" aria-label="First name" style="border-left: solid 10px #800000;border-bottom: 0px; border-bottom-left-radius: 0;" class="form-control text-center" readonly disabled>
								<input value="N/A" type="text" aria-label="First name" style="border: 0px;" id="Temperature3" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Temperature4" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Temperature5" class="form-control text-center" readonly>
							</div>
							<div class="input-group">
								<input value="B.R RH (%)" type="text" aria-label="First name" style="border-left: solid 10px #800000;border-top: 0px; border-top-left-radius: 0;" class="form-control text-center" readonly disabled>
								<input value="N/A" type="text" aria-label="First name" style="border: 0px;" id="Humidity3" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Humidity4" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Humidity5" class="form-control text-center" readonly>
							</div>
						</td>
					</th>
				</tr>
				<tr>
					<th>
						<td class="text-center">
							<div class="input-group">
								<input value="U.L TP (&deg;C)" type="text" aria-label="First name" style="border-left: solid 10px #800000;border-bottom: 0px; border-bottom-left-radius: 0;" class="form-control text-center" readonly disabled>
								<input value="N/A" type="text" aria-label="First name" style="border: 0px;" id="Temperature6" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Temperature7" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Temperature8" class="form-control text-center" readonly>
							</div>
							<div class="input-group">
								<input value="U.L RH (%)" type="text" aria-label="First name" style="border-left: solid 10px #800000;border-top: 0px; border-top-left-radius: 0;" class="form-control text-center" readonly disabled>
								<input value="N/A" type="text" aria-label="First name" style="border: 0px;" id="Humidity6" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Humidity7" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Humidity8" class="form-control text-center" readonly>
							</div>
						</td>
					</th>
				</tr>
				<tr>
					<th>
						<td class="text-center">
							<div class="input-group">
								<input value="B.L TP (&deg;C)" type="text" aria-label="First name" style="border-left: solid 10px #800000;border-bottom: 0px; border-bottom-left-radius: 0;" class="form-control text-center" readonly disabled>
								<input value="N/A" type="text" aria-label="First name" style="border: 0px;" id="Temperature9" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Temperature10" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Temperature11" class="form-control text-center" readonly>
							</div>
							<div class="input-group">
								<input value="B.L RH (%)" type="text" aria-label="First name" style="border-left: solid 10px #800000;border-top: 0px; border-top-left-radius: 0;" class="form-control text-center" readonly disabled>
								<input value="N/A" type="text" aria-label="First name" style="border: 0px;" id="Humidity9" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Humidity10" class="form-control text-center" readonly>
								<input value="N/A" type="text" aria-label="Last name" style="border: 0px;" id="Humidity11" class="form-control text-center" readonly>
							</div>
						</td>
					</th>
				</tr>
			</tbody>
		</table>
	</div>	
</div>
</form>
<!-- Modal -->
<script>
    function updateDuration() {
        var userDateTime = document.getElementById('duration').value;

        if (!userDateTime) {
            var durationDisplay = document.getElementById('durationDisplay');
            durationDisplay.innerHTML = '<strong>Duration:</strong>';
            return;
        }

        var userDate = new Date(userDateTime);
        var currentDate = new Date();
        var durationMillis = userDate - currentDate;
        var days = Math.floor(durationMillis / (24 * 60 * 60 * 1000));
        var hours = Math.floor((durationMillis % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
        var minutes = Math.floor((durationMillis % (60 * 60 * 1000)) / (60 * 1000));
        var seconds = Math.floor((durationMillis % (60 * 1000)) / 1000);

        var durationDisplay = document.getElementById('durationDisplay');
        durationDisplay.innerHTML = `<strong>Time Duration:</strong> ${days} days, ${hours} hours, ${minutes} minutes, ${seconds} seconds`;
    }
    function handleModeChange() {
		var modeSelect = document.getElementById("modeSelect");
		var powerSelection = document.getElementById("powerSelection");
		var powerSourceSelect = document.getElementById("powerSourceSelect");

		if (modeSelect.value === "MANUAL") {
			powerSelection.style.display = "block";
			powerSourceSelect.disabled = false; // Enable the dropdown
		} else {
			powerSelection.style.display = "none";
			powerSourceSelect.disabled = true; // Disable the dropdown
		}
	}


  window.onload = function () {
    // Extract endTime from timerInfo and convert it to a Date object
    var endTimeString = '<%= timerInfo ? timerInfo.endTime : "" %>';

    // Check if endTimeString is not empty before creating a Date object
    if (endTimeString) {
      var endTime = new Date(endTimeString);

      // Initialize countdown timer with the extracted endTime
      updateRemainingTime(endTime);
    }
  };
</script>


<script>
    function checkTimeValidity() {
        // Check if days, hours, and minutes are valid numbers and non-negative
        var days = parseInt(document.getElementById('days').value);
        var hours = parseInt(document.getElementById('hours').value);
        var minutes = parseInt(document.getElementById('minutes').value);

        if (isNaN(days) || isNaN(hours) || isNaN(minutes) || days < 0 || hours < 0 || minutes < 0) {
            // If any of the values are invalid, show an alert
            document.getElementById('alertMessage').innerText = "Please enter valid numeric and non-negative values for days, hours, and minutes.";
            document.getElementById('alert').style.display = 'block';
            return false; // Prevent form submission
        }

		if (days > 25) {
			document.getElementById('alertMessage').innerText = "Error: Days input limits at 25.";
            document.getElementById('alert').style.display = 'block';
            return false; // Prevent form submission
		}
		if (hours > 23) {
			document.getElementById('alertMessage').innerText = "Error: Hours input limits at 23.";
            document.getElementById('alert').style.display = 'block';
            return false; // Prevent form submission
		}
		if (minutes > 59) {
			document.getElementById('alertMessage').innerText = "Error: Minutes input limits at 59.";
            document.getElementById('alert').style.display = 'block';
            return false; // Prevent form submission
		}

        // Allow form submission
        return true;
    }
    // Add an event listener to the form submission
    document.getElementById('startDryingForm').addEventListener('submit', function (event) {
        // Check the validity of the selected time and input values before allowing the form submission
        if (!checkTimeValidity()) {
            // Prevent form submission if the selected time or input values are not valid
            event.preventDefault();
        }
    });
</script>


